{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tamil Cloud Community","text":""},{"location":"#about-us","title":"About Us","text":"<p>Tamil Cloud is a community where cloud technology enthusiasts come together to share their knowledge and experiences in their regional language. This community is dedicated to providing cloud knowledge and resources in Tamil, helping enthusiasts learn and grow in the field of cloud computing.</p>"},{"location":"#resources","title":"Resources","text":"<p>Here are some valuable resources shared by our community</p> <ul> <li>Cloud Tutorials Step-by-step guides on various cloud services.</li> <li>Webinars Recorded webinars on cloud technologies.</li> <li>Broadcasts In-depth broadcasts on cloud computing, DevOps, and more.</li> </ul>"},{"location":"#join-us","title":"Join Us","text":"<p>Subscribe to our YouTube Channel and join our community to stay updated with the latest content and resources.</p> <p>\u0ba8\u0ba9\u0bcd\u0bb1\u0bbf! Thank you for being a part of Tamil Cloud.</p>"},{"location":"contributes/","title":"Contributes","text":""},{"location":"contributes/#contributors","title":"Contributors","text":"<p>Meet our contributors who make this community resourceful</p> <ul> <li>Member 1: Cloud Architect, AWS Expert</li> <li>Member 1: DevOps Engineer, Kubernetes Specialist</li> <li>Member 1: Cloud Security Analyst</li> </ul>"},{"location":"aws/automatically-revert-sg-rule/","title":"Automatically Revert Changes on EC2 Security Groups","text":"<p>Set up an automated process to revert unauthorized changes to your EC2 security groups using AWS CloudTrail, Lambda, and CloudWatch.</p>"},{"location":"aws/automatically-revert-sg-rule/#1-create-a-custom-vpc-security-group","title":"1. Create a Custom VPC Security Group","text":"<ul> <li>Navigate to the VPC Dashboard in the AWS Management Console.</li> <li>Click on Security Groups and then Create security group.</li> <li>Tag your security group with the name <code>prod-sg</code>.</li> </ul>"},{"location":"aws/automatically-revert-sg-rule/#2-create-a-cloudtrail-trail","title":"2. Create a CloudTrail Trail","text":"<ul> <li>Go to the CloudTrail Dashboard.</li> <li>Click on Trails and then Create trail.</li> <li>Choose a name for your trail and ensure it logs events for the region where your security group resides.</li> </ul>"},{"location":"aws/automatically-revert-sg-rule/#3-create-a-lambda-execution-role","title":"3. Create a Lambda Execution Role","text":"<ul> <li>Go to the IAM Dashboard.</li> <li>Click on Roles and then Create role.</li> <li>Choose the Lambda service and attach <code>AmazonEC2ReadOnlyAccess</code> and <code>CloudWatchLogsFullAccess</code> policies.</li> </ul>"},{"location":"aws/automatically-revert-sg-rule/#4-create-a-lambda-function","title":"4. Create a Lambda Function","text":"<ul> <li>Go to the Lambda Dashboard and click Create function.</li> <li>Choose Author from scratch and configure the function to use the execution role you created.</li> <li>Use the following Python code for the Lambda function:</li> </ul> <pre><code>import os\nimport json\nimport boto3\n\n# Set the global variables\nglobalVars = {\n    'Owner': \"tamilcloud\",\n    'Environment': \"Test\",\n    'REGION_NAME': \"xxxxxxxxx\",\n    'tagName': \"prod-sg\",\n    'security_group_id': os.environ['security_group_id']\n}\n\ndef lambda_handler(event, context):\n    print(event)\n    if 'detail' not in event or 'eventName' not in event['detail']:\n        return {\"Result\": \"Failure\", \"Message\": \"Lambda not triggered by an event\"}\n\n    if (event['detail']['eventName'] == 'AuthorizeSecurityGroupIngress' and\n            event['detail']['requestParameters']['groupId'] == globalVars['security_group_id']):\n        result = revoke_security_group_ingress(event['detail'])\n        message = f\"AUTO-MITIGATED: Ingress rule removed from security group: {result['group_id']} that was added by {result['user_name']}: {json.dumps(result['ip_permissions'])}\"\n        print(message)\n\ndef revoke_security_group_ingress(event_detail):\n    request_parameters = event_detail['requestParameters']\n    ip_permissions = normalize_paramter_names(request_parameters['ipPermissions']['items'])\n    boto3.client('ec2').revoke_security_group_ingress(\n        GroupId=request_parameters['groupId'],\n        IpPermissions=ip_permissions\n    )\n    return {\n        'group_id': request_parameters['groupId'],\n        'user_name': event_detail['userIdentity']['arn'],\n        'ip_permissions': ip_permissions\n    }\n\ndef normalize_paramter_names(ip_items):\n    new_ip_items = []\n    for ip_item in ip_items:\n        new_ip_item = {\n            \"IpProtocol\": ip_item['ipProtocol'],\n            \"FromPort\": ip_item['fromPort'],\n            \"ToPort\": ip_item['toPort']\n        }\n        if 'ipv6Ranges' in ip_item and ip_item['ipv6Ranges']:\n            ipv_range_list_name = 'ipv6Ranges'\n            ipv_address_value = 'cidrIpv6'\n        else:\n            ipv_range_list_name = 'ipRanges'\n            ipv_address_value = 'cidrIp'\n        ip_ranges = [{ipv_address_value.capitalize(): item[ipv_address_value]} for item in ip_item[ipv_range_list_name]['items']]\n        new_ip_item[ipv_range_list_name.capitalize()] = ip_ranges\n        new_ip_items.append(new_ip_item)\n    return new_ip_items\n</code></pre>"},{"location":"aws/automatically-revert-sg-rule/#5-add-cloudwatch-event-trigger","title":"5. Add CloudWatch Event Trigger","text":"<ul> <li>Go to the CloudWatch Dashboard and click Rules.</li> <li>Click Create rule and set the event source to Event Source.</li> <li>Choose EC2 Security Group and set the detail type to AWS API Call via CloudTrail.</li> <li>Add your Lambda function as the target.</li> </ul>"},{"location":"aws/automatically-revert-sg-rule/#6-test-the-setup","title":"6. Test the Setup","text":"<ul> <li>Manually change the rules in your security group.</li> <li>Verify that the changes are reverted automatically.</li> <li>Monitor CloudWatch Logs and Lambda execution results to confirm functionality.</li> </ul> <p>Feel free to reach out us if you have any questions or need further assistance!</p> <p></p>"},{"location":"aws/linuxeng-need-shell-scripting/","title":"AWS Cloud Engineer Roadmap","text":"<p>Essential shell scripting tasks for AWS Cloud Engineers to automate routine tasks, improving efficiency and reliability in managing backups, monitoring system health, and ensuring service uptime.</p>"},{"location":"aws/linuxeng-need-shell-scripting/#1-file-backup-with-datestamp-and-send-mail-notification","title":"1. File Backup with Datestamp and Send Mail Notification","text":"<p>Creates a backup, timestamps it, and sends an email notification.</p> <pre><code>#!/bin/bash\nTIME=$(date +%b-%d-%y)\nFILENAME=backup-$TIME.tar.gz\nSRCDIR=/imp-data\nDESDIR=/mybackupfolder\n\ntar -cpzf $DESDIR/$FILENAME $SRCDIR\n\nif [ $? -eq 0 ]; then\n    echo \"Backup Successful: $FILENAME\" | mailx -s \"Backup Status\" itsupport@gmail.com\nelse\n    echo \"Backup Failed\" | mailx -s \"Backup Status\" itsupport@gmail.com\n    exit 1\nfi\n\nfind $SRCDIR -mindepth 1 -mtime +1 -delete\n</code></pre>"},{"location":"aws/linuxeng-need-shell-scripting/#2-mysql-db-backup-copy-to-aws-s3-and-delete-old-backups","title":"2. MySQL DB Backup, Copy to AWS S3, and Delete Old Backups","text":"<p>Performs a MySQL backup, uploads it to S3, and deletes the local backup.</p> <pre><code>#!/bin/bash\n\nFILE=DB_dump_$(date +%Y%m%d).sql\n\nmysqldump -u root -p password target_db &gt; /backup/$FILE\ngzip /backup/$FILE\naws s3 cp /backup/$FILE.gz s3://targetbucket/SQL/$(date +%Y%m%d)/\nrm -rf /backup/$FILE.gz /backup/$FILE\n\nexit 0\n</code></pre>"},{"location":"aws/linuxeng-need-shell-scripting/#3-mysql-db-backup-locally-and-send-mail-notification","title":"3. MySQL DB Backup Locally and Send Mail Notification","text":"<p>Creates a local MySQL backup, compresses it, and sends an email notification.</p> <pre><code>#!/bin/bash\n\nfilename=live-DB-$(date +%Y-%m-%d).sql\n\nmysqldump -u root -p password target_db &gt; /backup/DB/$filename\nzip /backup/DB/$filename.zip /backup/DB/$filename\nrm -rf /backup/DB/$filename\necho \"MySQL backup completed\" | mail -s \"MySQL Backup\" itsupport@gmail.com\nfind /backup/DB/ -mindepth 1 -mtime +3 -delete\n</code></pre>"},{"location":"aws/linuxeng-need-shell-scripting/#4-disk-usage-check-and-send-mail-notification","title":"4. Disk Usage Check and Send Mail Notification","text":"<p>Checks if disk usage exceeds 80% and sends an email alert if it does.</p> <pre><code>#!/bin/bash\nCURRENT=$(df / | grep / | awk '{print $5}' | sed 's/%//g')\nTHRESHOLD=80\n\nif [ \"$CURRENT\" -gt \"$THRESHOLD\" ]; then\n    mail -s 'Disk Space Alert' itsupport@gmail.com &lt;&lt;EOF\nRoot partition free space is critically low. Used: $CURRENT%\nEOF\nfi\n</code></pre>"},{"location":"aws/linuxeng-need-shell-scripting/#5-service-up-or-down-check-and-mail-notification","title":"5. Service Up or Down Check and Mail Notification","text":"<p>Checks if a service (e.g., Apache) is running, sends an alert if it is down, and attempts to start it.</p> <pre><code>#!/bin/bash\nUP=$(systemctl is-active apache2)\n\nif [ \"$UP\" != \"active\" ]; then\n    echo \"Webserver is down.\" | mail -s \"Webserver Down\" itsupport@gmail.com\n    sudo systemctl start apache2\nfi\n</code></pre>"},{"location":"aws/linuxeng-need-shell-scripting/#6-check-server-memory-and-send-mail-notification","title":"6. Check Server Memory and Send Mail Notification","text":"<p>Checks available memory and sends an alert if it falls below a threshold.</p> <pre><code>#!/bin/bash\nsubject=\"Server Memory Alert\"\nTo=\"server.monitor@example.com\"\nfree=$(free -mt | grep Total | awk '{print $4}')\n\nif [ \"$free\" -le 100 ]; then\n    echo -e \"Warning: Low memory!\\n\\nFree memory: $free MB\" | mail -s \"$subject\" $To\nfi\n\nexit 0\n</code></pre> <p>These shell scripts enhancing the reliability and efficiency of your cloud infrastructure. Adapt these scripts to fit your specific needs and boost your productivity.</p>"},{"location":"devops_training/devops_trainng_2024/","title":"DevOps Trainng 2024 - Overview Doc","text":"<p>1. Introduction to DevOps </p> Section Topics Definition and Importance \u2022 What is DevOps?\u2022 Benefits of DevOps: Speed, Rapid Delivery, Reliability, Scalability, Improved Collaboration, and Security. DevOps Lifecycle \u2022 Continuous Integration, Continuous Delivery, Continuous Deployment\u2022 DevOps Tools and Practices DevOps Culture \u2022 Collaboration between Development and Operations\u2022 Automation and Monitoring <p>2. Linux Basics</p> Section Topics Introduction to Linux \u2022 What is Linux? Overview of different distributions\u2022 Why Linux is important in DevOps Basic Commands \u2022 File system navigation: <code>ls</code>, <code>cd</code>, <code>pwd</code>\u2022 File operations: <code>cp</code>, <code>mv</code>, <code>rm</code>, <code>touch</code>, <code>mkdir</code>\u2022 Permissions: <code>chmod</code>, <code>chown</code> Shell Scripting Basics \u2022 Writing and running scripts\u2022 Variables, loops, and conditionals <p>3. Introduction to AWS (Amazon Web Services)</p> Section Topics Overview of Cloud Computing \u2022 What is cloud computing?\u2022 Types of cloud services: IaaS, PaaS, SaaS AWS Services Overview \u2022 EC2, S3, RDS, Lambda, VPC, IAM Setting Up an AWS Environment \u2022 Creating an AWS account\u2022 Launching an EC2 instance\u2022 Basic security practices (IAM, security groups) <p>4. Jenkins for CI/CD </p> Section Topics Introduction to Jenkins \u2022 What is Jenkins? Role in CI/CD\u2022 Jenkins Architecture Setting Up Jenkins \u2022 Installation and configuration\u2022 Jenkins Dashboard overview Creating and Running Jobs \u2022 Freestyle projects\u2022 Pipelines (Jenkinsfile) Integration with Other Tools \u2022 Integration with Git, Docker, and AWS <p>5. Docker for Containerization </p> Section Topics Introduction to Docker \u2022 What is Docker? Containers vs. Virtual Machines\u2022 Benefits of Docker Docker Basics \u2022 Docker images and containers\u2022 Dockerfile and building images Docker Commands \u2022 <code>docker run</code>, <code>docker build</code>, <code>docker images</code>, <code>docker ps</code>, <code>docker stop</code> Docker Compose \u2022 Multi-container applications\u2022 Writing a <code>docker-compose.yml</code> file <p>6. Maven for Build Automation </p> Section Topics Introduction to Maven \u2022 What is Maven? Role in build automation\u2022 Maven Project Object Model (POM) Building and Managing Dependencies \u2022 Understanding the lifecycle: clean, compile, test, package, install, deploy Plugins and Extensions \u2022 Commonly used Maven plugins <p>7. Kubernetes for Container Orchestration </p> Section Topics Introduction to Kubernetes \u2022 What is Kubernetes? Role in managing containers\u2022 Kubernetes Architecture Core Components \u2022 Pods, Nodes, Deployments, Services Basic Operations \u2022 Deploying an application\u2022 Scaling and updating applications Managing Cluster \u2022 Kubectl basics\u2022 Monitoring and logging <p>8. Terraform for Infrastructure as Code</p> Section Topics Introduction to Terraform \u2022 What is Terraform? Role in infrastructure as code (IaC)\u2022 Benefits of using Terraform Terraform Basics \u2022 Writing configuration files (<code>.tf</code> files)\u2022 Providers and resources Terraform Workflow \u2022 <code>terraform init</code>, <code>terraform plan</code>, <code>terraform apply</code>, <code>terraform destroy</code> State Management \u2022 Managing Terraform state files <p>9. Shell Scripting for Automation </p> Section Topics Importance of Scripting in DevOps \u2022 Automating routine tasks Advanced Shell Scripting \u2022 Functions, error handling, debugging Practical Examples \u2022 Automating deployments, monitoring system health <p>10. Conclusion and Best Practices </p> Section Topics Key Takeaways \u2022 Importance of each tool in the DevOps lifecycle\u2022 Continuous learning and improvement Best Practices \u2022 Security, monitoring, and scalability\u2022 Collaboration and communication <p>11. Projects</p> Section Topics Hands-on Projects \u2022 Setup a DevOps CI/CD pipeline for web application\u2022 Automated Website deployment with Docker\u2022 Create a monitoring dashboard for the web application\u2022 Building a scalable application with Docker &amp; Kubernetes\u2022 Implement CI/CD for DevENV/ProdENV deployments\u2022 Automated resource allocation\u2022 Accessing application using Ingress Controller\u2022 Upgrade EKS Cluster without Downtime\u2022 3-tier Architecture setup using Terraform\u2022 Deploying application via Helm Chart\u2022 Argo CD Deployment"}]}